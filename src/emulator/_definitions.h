#pragma once

#include <cstdint>
#include <string>

typedef uint8_t byte;
typedef uint16_t ushort;
typedef int8_t sbyte;

struct cpu_data {
	byte a = 0x00;
	byte f = 0x00;
	byte b = 0x00;
	byte c = 0x00;
	byte d = 0x00;
	byte e = 0x00;
	byte h = 0x00;
	byte l = 0x00;

	ushort pc = 0x0000;
	ushort sp = 0x0000;

	bool ime = false;
	bool halted = false;
};

enum cpu_joined_registers {
	registers_AF = 0,
	registers_BC = 1,
	registers_DE = 2,
	registers_HL = 3,
	registers_NONE = 255,
};

enum cpu_flags {
	flags_NONE = 0,
	flags_ZERO = 7,
	flags_SUBTRACTION = 6,
	flags_HALFCARRY = 5,
	flags_CARRY = 4
};

enum cpu_instructions {
	inst_NOOP = 0x00,
	inst_LD_BC_N16 = 0x01,
	inst_LD_BC_A = 0x02,
	inst_INC_BC = 0x03,
	inst_INC_B = 0x04,
	inst_DEC_B = 0x05,
	inst_LD_B_N8 = 0x06,
	inst_RLCA = 0x07,
	inst_LD_N16_SP = 0x08,
	inst_ADD_HL_BC = 0x09,
	inst_LD_A_BC = 0x0a,
	inst_DEC_BC = 0x0b,
	inst_INC_C = 0x0c,
	inst_DEC_C = 0x0d,
	inst_LD_C_N8 = 0x0e,
	inst_RRCA = 0x0f,

	inst_STOP_N8 = 0x10,
	inst_LD_DE_N16 = 0x11,
	inst_LD_DE_A = 0x12,
	inst_INC_DE = 0x13,
	inst_INC_D = 0x14,
	inst_DEC_D = 0x15,
	inst_LD_D_N8 = 0x16,
	inst_RLA = 0x17,
	inst_JR_E8 = 0x18,
	inst_ADD_HL_DE = 0x19,
	inst_LD_A_DE = 0x1a,
	inst_DEC_DE = 0x1b,
	inst_INC_E = 0x1c,
	inst_DEC_E = 0x1d,
	inst_LD_E_N8 = 0x1e,
	inst_RRA = 0x1f,

	inst_JR_NZ_E8 = 0x20,
	inst_LD_HL_N16 = 0x21,
	inst_LDI_HL_A = 0x22,
	inst_INC_HL = 0x23,
	inst_INC_H = 0x24,
	inst_DEC_H = 0x25,
	inst_LD_H_N8 = 0x26,
	inst_DAA = 0x27,
	inst_JR_Z_E8 = 0x28,
	inst_ADD_HL_HL = 0x29,
	inst_LD_A_HLI = 0x2a,
	inst_DEC_HL = 0x2b,
	inst_INC_L = 0x2c,
	inst_DEC_L = 0x2d,
	inst_LD_L_N8 = 0x2e,
	inst_CPL = 0x2f,

	inst_JR_NC_E8 = 0x30,
	inst_LD_SP_N16 = 0x31,
	inst_LDD_HL_A = 0x32,
	inst_INC_SP = 0x33,
	inst_INC_memHL = 0x34,
	inst_DEC_memHL = 0x35,
	inst_LD_HL_N8 = 0x36,
	inst_SCF = 0x37,
	inst_JR_C_E8 = 0x38,
	inst_ADD_HL_SP = 0x39,
	inst_LD_A_HLD = 0x3a,
	inst_DEC_SP = 0x3b,
	inst_INC_A = 0x3c,
	inst_DEC_A = 0x3d,
	inst_LD_A_N8 = 0x3e,
	inst_CCF = 0x3f,

	inst_LD_B_B = 0x40,
	inst_LD_B_C = 0x41,
	inst_LD_B_D = 0x42,
	inst_LD_B_E = 0x43,
	inst_LD_B_H = 0x44,
	inst_LD_B_L = 0x45,
	inst_LD_B_HL = 0x46,
	inst_LD_B_A = 0x47,
	inst_LD_C_B = 0x48,
	inst_LD_C_C = 0x49,
	inst_LD_C_D = 0x4a,
	inst_LD_C_E = 0x4b,
	inst_LD_C_H = 0x4c,
	inst_LD_C_L = 0x4d,
	inst_LD_C_HL = 0x4e,
	inst_LD_C_A = 0x4f,

	inst_LD_D_B = 0x50,
	inst_LD_D_C = 0x51,
	inst_LD_D_D = 0x52,
	inst_LD_D_E = 0x53,
	inst_LD_D_H = 0x54,
	inst_LD_D_L = 0x55,
	inst_LD_D_HL = 0x56,
	inst_LD_D_A = 0x57,
	inst_LD_E_B = 0x58,
	inst_LD_E_C = 0x59,
	inst_LD_E_D = 0x5a,
	inst_LD_E_E = 0x5b,
	inst_LD_E_H = 0x5c,
	inst_LD_E_L = 0x5d,
	inst_LD_E_HL = 0x5e,
	inst_LD_E_A = 0x5f,

	inst_LD_H_B = 0x60,
	inst_LD_H_C = 0x61,
	inst_LD_H_D = 0x62,
	inst_LD_H_E = 0x63,
	inst_LD_H_H = 0x64,
	inst_LD_H_L = 0x65,
	inst_LD_H_HL = 0x66,
	inst_LD_H_A = 0x67,
	inst_LD_L_B = 0x68,
	inst_LD_L_C = 0x69,
	inst_LD_L_D = 0x6a,
	inst_LD_L_E = 0x6b,
	inst_LD_L_H = 0x6c,
	inst_LD_L_L = 0x6d,
	inst_LD_L_HL = 0x6e,
	inst_LD_L_A = 0x6f,

	inst_LD_HL_B = 0x70,
	inst_LD_HL_C = 0x71,
	inst_LD_HL_D = 0x72,
	inst_LD_HL_E = 0x73,
	inst_LD_HL_H = 0x74,
	inst_LD_HL_L = 0x75,
	inst_HALT = 0x76,
	inst_LD_HL_A = 0x77,
	inst_LD_A_B = 0x78,
	inst_LD_A_C = 0x79,
	inst_LD_A_D = 0x7a,
	inst_LD_A_E = 0x7b,
	inst_LD_A_H = 0x7c,
	inst_LD_A_L = 0x7d,
	inst_LD_A_HL = 0x7e,
	inst_LD_A_A = 0x7f,

	inst_ADD_A_B = 0x80,
	inst_ADD_A_C = 0x81,
	inst_ADD_A_D = 0x82,
	inst_ADD_A_E = 0x83,
	inst_ADD_A_H = 0x84,
	inst_ADD_A_L = 0x85,
	inst_ADD_A_HL = 0x86,
	inst_ADD_A_A = 0x87,
	inst_ADC_A_B = 0x88,
	inst_ADC_A_C = 0x89,
	inst_ADC_A_D = 0x8a,
	inst_ADC_A_E = 0x8b,
	inst_ADC_A_H = 0x8c,
	inst_ADC_A_L = 0x8d,
	inst_ADC_A_HL = 0x8e,
	inst_ADC_A_A = 0x8f,

	inst_SUB_A_B = 0x90,
	inst_SUB_A_C = 0x91,
	inst_SUB_A_D = 0x92,
	inst_SUB_A_E = 0x93,
	inst_SUB_A_H = 0x94,
	inst_SUB_A_L = 0x95,
	inst_SUB_A_HL = 0x96,
	inst_SUB_A_A = 0x97,
	inst_SBC_A_B = 0x98,
	inst_SBC_A_C = 0x99,
	inst_SBC_A_D = 0x9a,
	inst_SBC_A_E = 0x9b,
	inst_SBC_A_H = 0x9c,
	inst_SBC_A_L = 0x9d,
	inst_SBC_A_HL = 0x9e,
	inst_SBC_A_A = 0x9f,

	inst_AND_A_B = 0xa0,
	inst_AND_A_C = 0xa1,
	inst_AND_A_D = 0xa2,
	inst_AND_A_E = 0xa3,
	inst_AND_A_H = 0xa4,
	inst_AND_A_L = 0xa5,
	inst_AND_A_HL = 0xa6,
	inst_AND_A_A = 0xa7,
	inst_XOR_A_B = 0xa8,
	inst_XOR_A_C = 0xa9,
	inst_XOR_A_D = 0xaa,
	inst_XOR_A_E = 0xab,
	inst_XOR_A_H = 0xac,
	inst_XOR_A_L = 0xad,
	inst_XOR_A_HL = 0xae,
	inst_XOR_A_A = 0xaf,

	inst_OR_A_B = 0xb0,
	inst_OR_A_C = 0xb1,
	inst_OR_A_D = 0xb2,
	inst_OR_A_E = 0xb3,
	inst_OR_A_H = 0xb4,
	inst_OR_A_L = 0xb5,
	inst_OR_A_HL = 0xb6,
	inst_OR_A_A = 0xb7,
	inst_CP_A_B = 0xb8,
	inst_CP_A_C = 0xb9,
	inst_CP_A_D = 0xba,
	inst_CP_A_E = 0xbb,
	inst_CP_A_H = 0xbc,
	inst_CP_A_L = 0xbd,
	inst_CP_A_HL = 0xbe,
	inst_CP_A_A = 0xbf,

	inst_RET_NZ = 0xc0,
	inst_POP_BC = 0xc1,
	inst_JP_NZ_N16 = 0xc2,
	inst_JP_N16 = 0xc3,
	inst_CALL_NZ_N16 = 0xc4,
	inst_PUSH_BC = 0xc5,
	inst_ADD_A_N8 = 0xc6,
	inst_RST_00 = 0xc7,
	inst_RET_Z = 0xc8,
	inst_RET = 0xc9,
	inst_JP_Z_N16 = 0xca,
	inst_CB = 0xcb,
	inst_CALL_Z_N16 = 0xcc,
	inst_CALL_N16 = 0xcd,
	inst_ADC_A_N8 = 0xce,
	inst_RST_08 = 0xcf,

	inst_RET_NC = 0xd0,
	inst_POP_DE = 0xd1,
	inst_JP_NC_N16 = 0xd2,
	//not valid 0xd3
	inst_CALL_NC_N16 = 0xd4,
	inst_PUSH_DE = 0xd5,
	inst_SUB_A_N8 = 0xd6,
	inst_RST_10 = 0xd7,
	inst_RET_C = 0xd8,
	inst_RETI = 0xd9,
	inst_JP_C_N16 = 0xda,
	//not valid 0xdb
	inst_CALL_C_N16 = 0xdc,
	//not valid 0xdd
	inst_SBC_A_N8 = 0xde,
	inst_RST_18 = 0xdf,

	inst_LDH_N8_A = 0xe0,
	inst_POP_HL = 0xe1,
	inst_LDH_C_A = 0xe2,
	//not valid 0xe3
	//not valid 0xe4
	inst_PUSH_HL = 0xe5,
	inst_AND_A_N8 = 0xe6,
	inst_RST_20 = 0xe7,
	inst_ADD_SP_E8 = 0xe8,
	inst_JP_HL = 0xe9,
	inst_LD_N16_A = 0xea,
	//not valid 0xeb
	//not valid 0xec
	//not valid 0xed
	inst_XOR_A_N8 = 0xee,
	inst_RST_28 = 0xef,

	inst_LDH_A_N8 = 0xf0,
	inst_POP_AF = 0xf1,
	inst_LDH_A_C = 0xf2,
	inst_DI = 0xf3,
	//not valid 0xf4
	inst_PUSH_AF = 0xf5,
	inst_OR_A_N8 = 0xf6,
	inst_RST_30 = 0xf7,
	inst_LD_HL_SP_E8 = 0xf8,
	inst_LD_SP_HL = 0xf9,
	inst_LD_A_N16 = 0xfa,
	inst_EI = 0xfb,
	//not valid 0xfc
	//not valid 0xfd
	inst_CP_A_N8 = 0xfe,
	inst_RST_38 = 0xff
};

enum cpu_cb_instructions {
	inst_cb_RLC_B = 0x00,
	inst_cb_RLC_C = 0x01,
	inst_cb_RLC_D = 0x02,
	inst_cb_RLC_E = 0x03,
	inst_cb_RLC_H = 0x04,
	inst_cb_RLC_L = 0x05,
	inst_cb_RLC_HL = 0x06,
	inst_cb_RLC_A = 0x07,
	inst_cb_RRC_B = 0x08,
	inst_cb_RRC_C = 0x09,
	inst_cb_RRC_D = 0x0a,
	inst_cb_RRC_E = 0x0b,
	inst_cb_RRC_H = 0x0c,
	inst_cb_RRC_L = 0x0d,
	inst_cb_RRC_HL = 0x0e,
	inst_cb_RRC_A = 0x0f,

	inst_cb_RL_B = 0x10,
	inst_cb_RL_C = 0x11,
	inst_cb_RL_D = 0x12,
	inst_cb_RL_E = 0x13,
	inst_cb_RL_H = 0x14,
	inst_cb_RL_L = 0x15,
	inst_cb_RL_HL = 0x16,
	inst_cb_RL_A = 0x17,
	inst_cb_RR_B = 0x18,
	inst_cb_RR_C = 0x19,
	inst_cb_RR_D = 0x1a,
	inst_cb_RR_E = 0x1b,
	inst_cb_RR_H = 0x1c,
	inst_cb_RR_L = 0x1d,
	inst_cb_RR_HL = 0x1e,
	inst_cb_RR_A = 0x1f,

	inst_cb_SLA_B = 0x20,
	inst_cb_SLA_C = 0x21,
	inst_cb_SLA_D = 0x22,
	inst_cb_SLA_E = 0x23,
	inst_cb_SLA_H = 0x24,
	inst_cb_SLA_L = 0x25,
	inst_cb_SLA_HL = 0x26,
	inst_cb_SLA_A = 0x27,
	inst_cb_SRA_B = 0x28,
	inst_cb_SRA_C = 0x29,
	inst_cb_SRA_D = 0x2a,
	inst_cb_SRA_E = 0x2b,
	inst_cb_SRA_H = 0x2c,
	inst_cb_SRA_L = 0x2d,
	inst_cb_SRA_HL = 0x2e,
	inst_cb_SRA_A = 0x2f,

	inst_cb_SWAP_B = 0x30,
	inst_cb_SWAP_C = 0x31,
	inst_cb_SWAP_D = 0x32,
	inst_cb_SWAP_E = 0x33,
	inst_cb_SWAP_H = 0x34,
	inst_cb_SWAP_L = 0x35,
	inst_cb_SWAP_HL = 0x36,
	inst_cb_SWAP_A = 0x37,
	inst_cb_SRL_B = 0x38,
	inst_cb_SRL_C = 0x39,
	inst_cb_SRL_D = 0x3a,
	inst_cb_SRL_E = 0x3b,
	inst_cb_SRL_H = 0x3c,
	inst_cb_SRL_L = 0x3d,
	inst_cb_SRL_HL = 0x3e,
	inst_cb_SRL_A = 0x3f,

	inst_cb_BIT_0_B = 0x40,
	inst_cb_BIT_0_C = 0x41,
	inst_cb_BIT_0_D = 0x42,
	inst_cb_BIT_0_E = 0x43,
	inst_cb_BIT_0_H = 0x44,
	inst_cb_BIT_0_L = 0x45,
	inst_cb_BIT_0_HL = 0x46,
	inst_cb_BIT_0_A = 0x47,
	inst_cb_BIT_1_B = 0x48,
	inst_cb_BIT_1_C = 0x49,
	inst_cb_BIT_1_D = 0x4a,
	inst_cb_BIT_1_E = 0x4b,
	inst_cb_BIT_1_H = 0x4c,
	inst_cb_BIT_1_L = 0x4d,
	inst_cb_BIT_1_HL = 0x4e,
	inst_cb_BIT_1_A = 0x4f,

	inst_cb_BIT_2_B = 0x50,
	inst_cb_BIT_2_C = 0x51,
	inst_cb_BIT_2_D = 0x52,
	inst_cb_BIT_2_E = 0x53,
	inst_cb_BIT_2_H = 0x54,
	inst_cb_BIT_2_L = 0x55,
	inst_cb_BIT_2_HL = 0x56,
	inst_cb_BIT_2_A = 0x57,
	inst_cb_BIT_3_B = 0x58,
	inst_cb_BIT_3_C = 0x59,
	inst_cb_BIT_3_D = 0x5a,
	inst_cb_BIT_3_E = 0x5b,
	inst_cb_BIT_3_H = 0x5c,
	inst_cb_BIT_3_L = 0x5d,
	inst_cb_BIT_3_HL = 0x5e,
	inst_cb_BIT_3_A = 0x5f,

	inst_cb_BIT_4_B = 0x60,
	inst_cb_BIT_4_C = 0x61,
	inst_cb_BIT_4_D = 0x62,
	inst_cb_BIT_4_E = 0x63,
	inst_cb_BIT_4_H = 0x64,
	inst_cb_BIT_4_L = 0x65,
	inst_cb_BIT_4_HL = 0x66,
	inst_cb_BIT_4_A = 0x67,
	inst_cb_BIT_5_B = 0x68,
	inst_cb_BIT_5_C = 0x69,
	inst_cb_BIT_5_D = 0x6a,
	inst_cb_BIT_5_E = 0x6b,
	inst_cb_BIT_5_H = 0x6c,
	inst_cb_BIT_5_L = 0x6d,
	inst_cb_BIT_5_HL = 0x6e,
	inst_cb_BIT_5_A = 0x6f,

	inst_cb_BIT_6_B = 0x70,
	inst_cb_BIT_6_C = 0x71,
	inst_cb_BIT_6_D = 0x72,
	inst_cb_BIT_6_E = 0x73,
	inst_cb_BIT_6_H = 0x74,
	inst_cb_BIT_6_L = 0x75,
	inst_cb_BIT_6_HL = 0x76,
	inst_cb_BIT_6_A = 0x77,
	inst_cb_BIT_7_B = 0x78,
	inst_cb_BIT_7_C = 0x79,
	inst_cb_BIT_7_D = 0x7a,
	inst_cb_BIT_7_E = 0x7b,
	inst_cb_BIT_7_H = 0x7c,
	inst_cb_BIT_7_L = 0x7d,
	inst_cb_BIT_7_HL = 0x7e,
	inst_cb_BIT_7_A = 0x7f,

	inst_cb_RES_0_B = 0x80,
	inst_cb_RES_0_C = 0x81,
	inst_cb_RES_0_D = 0x82,
	inst_cb_RES_0_E = 0x83,
	inst_cb_RES_0_H = 0x84,
	inst_cb_RES_0_L = 0x85,
	inst_cb_RES_0_HL = 0x86,
	inst_cb_RES_0_A = 0x87,
	inst_cb_RES_1_B = 0x88,
	inst_cb_RES_1_C = 0x89,
	inst_cb_RES_1_D = 0x8a,
	inst_cb_RES_1_E = 0x8b,
	inst_cb_RES_1_H = 0x8c,
	inst_cb_RES_1_L = 0x8d,
	inst_cb_RES_1_HL = 0x8e,
	inst_cb_RES_1_A = 0x8f,

	inst_cb_RES_2_B = 0x90,
	inst_cb_RES_2_C = 0x91,
	inst_cb_RES_2_D = 0x92,
	inst_cb_RES_2_E = 0x93,
	inst_cb_RES_2_H = 0x94,
	inst_cb_RES_2_L = 0x95,
	inst_cb_RES_2_HL = 0x96,
	inst_cb_RES_2_A = 0x97,
	inst_cb_RES_3_B = 0x98,
	inst_cb_RES_3_C = 0x99,
	inst_cb_RES_3_D = 0x9a,
	inst_cb_RES_3_E = 0x9b,
	inst_cb_RES_3_H = 0x9c,
	inst_cb_RES_3_L = 0x9d,
	inst_cb_RES_3_HL = 0x9e,
	inst_cb_RES_3_A = 0x9f,

	inst_cb_RES_4_B = 0xa0,
	inst_cb_RES_4_C = 0xa1,
	inst_cb_RES_4_D = 0xa2,
	inst_cb_RES_4_E = 0xa3,
	inst_cb_RES_4_H = 0xa4,
	inst_cb_RES_4_L = 0xa5,
	inst_cb_RES_4_HL = 0xa6,
	inst_cb_RES_4_A = 0xa7,
	inst_cb_RES_5_B = 0xa8,
	inst_cb_RES_5_C = 0xa9,
	inst_cb_RES_5_D = 0xaa,
	inst_cb_RES_5_E = 0xab,
	inst_cb_RES_5_H = 0xac,
	inst_cb_RES_5_L = 0xad,
	inst_cb_RES_5_HL = 0xae,
	inst_cb_RES_5_A = 0xaf,

	inst_cb_RES_6_B = 0xb0,
	inst_cb_RES_6_C = 0xb1,
	inst_cb_RES_6_D = 0xb2,
	inst_cb_RES_6_E = 0xb3,
	inst_cb_RES_6_H = 0xb4,
	inst_cb_RES_6_L = 0xb5,
	inst_cb_RES_6_HL = 0xb6,
	inst_cb_RES_6_A = 0xb7,
	inst_cb_RES_7_B = 0xb8,
	inst_cb_RES_7_C = 0xb9,
	inst_cb_RES_7_D = 0xba,
	inst_cb_RES_7_E = 0xbb,
	inst_cb_RES_7_H = 0xbc,
	inst_cb_RES_7_L = 0xbd,
	inst_cb_RES_7_HL = 0xbe,
	inst_cb_RES_7_A = 0xbf,

	inst_cb_SET_0_B = 0xc0,
	inst_cb_SET_0_C = 0xc1,
	inst_cb_SET_0_D = 0xc2,
	inst_cb_SET_0_E = 0xc3,
	inst_cb_SET_0_H = 0xc4,
	inst_cb_SET_0_L = 0xc5,
	inst_cb_SET_0_HL = 0xc6,
	inst_cb_SET_0_A = 0xc7,
	inst_cb_SET_1_B = 0xc8,
	inst_cb_SET_1_C = 0xc9,
	inst_cb_SET_1_D = 0xca,
	inst_cb_SET_1_E = 0xcb,
	inst_cb_SET_1_H = 0xcc,
	inst_cb_SET_1_L = 0xcd,
	inst_cb_SET_1_HL = 0xce,
	inst_cb_SET_1_A = 0xcf,

	inst_cb_SET_2_B = 0xd0,
	inst_cb_SET_2_C = 0xd1,
	inst_cb_SET_2_D = 0xd2,
	inst_cb_SET_2_E = 0xd3,
	inst_cb_SET_2_H = 0xd4,
	inst_cb_SET_2_L = 0xd5,
	inst_cb_SET_2_HL = 0xd6,
	inst_cb_SET_2_A = 0xd7,
	inst_cb_SET_3_B = 0xd8,
	inst_cb_SET_3_C = 0xd9,
	inst_cb_SET_3_D = 0xda,
	inst_cb_SET_3_E = 0xdb,
	inst_cb_SET_3_H = 0xdc,
	inst_cb_SET_3_L = 0xdd,
	inst_cb_SET_3_HL = 0xde,
	inst_cb_SET_3_A = 0xdf,

	inst_cb_SET_4_B = 0xe0,
	inst_cb_SET_4_C = 0xe1,
	inst_cb_SET_4_D = 0xe2,
	inst_cb_SET_4_E = 0xe3,
	inst_cb_SET_4_H = 0xe4,
	inst_cb_SET_4_L = 0xe5,
	inst_cb_SET_4_HL = 0xe6,
	inst_cb_SET_4_A = 0xe7,
	inst_cb_SET_5_B = 0xe8,
	inst_cb_SET_5_C = 0xe9,
	inst_cb_SET_5_D = 0xea,
	inst_cb_SET_5_E = 0xeb,
	inst_cb_SET_5_H = 0xec,
	inst_cb_SET_5_L = 0xed,
	inst_cb_SET_5_HL = 0xee,
	inst_cb_SET_5_A = 0xef,

	inst_cb_SET_6_B = 0xf0,
	inst_cb_SET_6_C = 0xf1,
	inst_cb_SET_6_D = 0xf2,
	inst_cb_SET_6_E = 0xf3,
	inst_cb_SET_6_H = 0xf4,
	inst_cb_SET_6_L = 0xf5,
	inst_cb_SET_6_HL = 0xf6,
	inst_cb_SET_6_A = 0xf7,
	inst_cb_SET_7_B = 0xf8,
	inst_cb_SET_7_C = 0xf9,
	inst_cb_SET_7_D = 0xfa,
	inst_cb_SET_7_E = 0xfb,
	inst_cb_SET_7_H = 0xfc,
	inst_cb_SET_7_L = 0xfd,
	inst_cb_SET_7_HL = 0xfe,
	inst_cb_SET_7_A = 0xff
};

enum cpu_instruction_cycles {
	cycles_NONE = 0,
	cycles_FOUR = 4,
	cycles_EIGHT = 8,
	cycles_TWELVE = 12,
	cycles_SIXTEEN = 16,
	cycles_TWENTY = 20,
	cycles_TWENTYFOUR = 24,
	cycles_TWENTYEIGHT = 28,
	cycles_THIRTYTWO = 32
};

enum cpu_rst_vectors {
	rst_none = 0xff,
	rst_00 = 0x00,
	rst_10 = 0x10,
	rst_20 = 0x20,
	rst_30 = 0x30,
	rst_08 = 0x08,
	rst_18 = 0x18,
	rst_28 = 0x28,
	rst_38 = 0x38
};

enum io_addresses {
	io_JOYP = 0x00,
	io_SB = 0x01,
	io_SC = 0x02,
	io_DIV = 0x04,
	io_TIMA = 0x05,
	io_TMA = 0x06,
	io_TAC = 0x07,
	io_IF = 0x0f,

	//sound here

	io_LCDC = 0x40,
	io_STAT = 0x41,
	io_SCY = 0x42,
	io_SCX = 0x43,
	io_LY = 0x44,
	io_LYC = 0x45,
	io_DMA = 0x46,
	io_BGP = 0x47,
	io_OBP0 = 0x48,
	io_OBP1 = 0x49,
	io_WY = 0x4a,
	io_WX = 0x4b,

	io_BANK = 0x50,
};

enum cartridge_types {
	int_NONE = 0xff,
	ROM_ONLY = 0x00,
	MBC1 = 0x01,
	MBC1_RAM = 0x02,
	MBC1_RAM_BATT = 0x03,
	MBC2 = 0x05,
	MBC2_BATT = 0x06,
	ROM_BATT = 0x08,
	ROM_RAM_BATT = 0x09,
	MBC3 = 0x11,
	MBC3_TIMER_BATT = 0x10,
	MBC3_RAM = 0x12,
	MBC3_RAM_BATT = 0x13,
	MBC5 = 0x19,
	MBC5_RAM = 0x1a,
	MBC5_RAM_BATT = 0x1b,
};

enum cart_rom_sizes {
	rom_NONE = 0xff,
	rom_KiB_32 = 0x00,
	rom_KiB_64 = 0x01,
	rom_KiB_128 = 0x02,
	rom_KiB_256 = 0x03,
	rom_KiB_512 = 0x04,
	rom_MiB_1 = 0x05,
	rom_MiB_2 = 0x06,
	rom_MiB_4 = 0x07,
	rom_MiB_8 = 0x08
};

enum cart_ram_sizes {
	ram_INVALID = 0xff,
	ram_NONE = 0x00,
	ram_UNUSED = 0x01,
	ram_KiB_8 = 0x02,
	ram_KiB_32 = 0x03,
	ram_KiB_128 = 0x04,
	ram_KiB_64 = 0x05
};

struct rom_header {
	std::string name = "";
	cartridge_types cartridge_type = ROM_ONLY;
	cart_rom_sizes cart_rom_size = rom_KiB_32;
	cart_ram_sizes cart_ram_size = ram_INVALID;
	byte checksum_byte = 0x00;
};

enum interrupt_types {
	int_VBLANK = 0,
	int_LCD = 1,
	int_TIMER = 2,
	int_SERIAL = 3,
	int_JOYPAD = 4,
};

enum ppu_modes {
	ppu_NONE = 5,
	ppu_OAM_SEARCH = 2,
	ppu_DRAW_MODE = 3,
	ppu_HBLANK = 0,
	ppu_VBLANK = 1
};

enum ppu_mode_lengths {
	ppu_OAM_LENGTH = 80,
	ppu_DRAW_LENGTH_MIN = 172,
	ppu_DRAW_LENGTH_MAX = 289,
	ppu_HBLANK_LENGTH_MIN = 87,
	ppu_HBLANK_LENGTH_MAX = 204,
	ppu_BLANK_LENGTH = 4560,
	ppu_FRAME_TOTAL_LENGTH = 70224,
	ppu_SCANLINE_TOTAL_LENGTH = 456
};